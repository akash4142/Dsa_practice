
#include <iostream>
#include <queue>
using namespace std;

struct Node {
	int data;
	Node* left;
	Node* right;

	Node(int value):data(value),left(nullptr),right(nullptr){}
};

class BinaryTree {
private:
	Node* root;

	Node* Insertrecursive(Node* current,int value) {
		if (current == nullptr) {
			return  new Node(value);
		}
		if (value < current->data) {
			current->left = Insertrecursive(current->left, value);
		}
		else {
			current->right = Insertrecursive(current->right, value);
		}
		return current;
	}

	void AllTransversal(Node* current) {
		if (current != nullptr) {
			AllTransversal(current->left);
			cout << current->data << " " ;
			AllTransversal(current->right);
		}
	}

	int kth_smallestnumber(Node* root, int value) {
		vector<int> ordered;
		inorderTransversal(root, ordered);

		if (value > 0 && value <= ordered.size()) {
			return ordered[value - 1];
		}
		else {
			return -1;
		}
	}


public:


	BinaryTree():root(nullptr){}

	Node* getRoot() const {
		return root;
	}

	void insert(int value) {
		root = Insertrecursive(root, value);
	}

	void Transversal() {
		AllTransversal(root);
	}
	

	int smallestnode(int value) {
		int result = kth_smallestnumber(root, value);

		
		if (result == -1) {
			cout << "Invalid value for kth_smallestnumber." << endl;
		}

		return result;
	}


};

int main() {
	BinaryTree tree;
	tree.insert(5);
	tree.insert(3);
	tree.insert(8);
	tree.insert(1);
	tree.insert(4);
	tree.insert(7);
	tree.insert(9);

	cout << "Inorder transversal :: ";
	tree.Transversal();


	cout << "The  smallest element in this tree is :: " << tree.smallestnode(3);

	return 0;
}
