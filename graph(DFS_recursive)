#include <iostream>
#include <list>
#include <vector>

using namespace std;


template <typename T>
class Graph {
	int V;
	vector<list<T>> adj;
public:
	Graph(int vertices) {
		this->V = vertices;
		adj.resize(vertices);
	}

	void addedges(int v, int w) {
		if (v < V && w < V) {
			adj[v].push_back(w);
		}
		else {
			cout << "Invalid vertices " << v << " or " << w << endl;
		}
	}

	void display() {
		cout << "Graph Adjacency List:" << endl;
		for (int i = 0; i < V; i++) {
			cout << "Vertex " << i << " -> ";
			for (const auto& neighbor : adj[i]) {
				cout << neighbor << " ";
			}
			cout << endl;
		}
	}


	void dfs(int startvertex) {
		vector<bool> visited(V, false);
		cout << "DFS Transversal starting from the vertex " << startvertex << " : " << endl;
		dfsutil(startvertex, visited);
	}

	void dfsutil(int vertex, vector<bool> &visited) {
		visited[vertex] = true;
		cout << vertex<<" ";

		for (const auto& neighbour : adj[vertex]) {
			if (!visited[neighbour]) {
				dfsutil(neighbour, visited);
			}
		}
	}

};


int main(){
	Graph<int> g(4);
	g.addedges(0, 1);
	g.addedges(0, 2);
	g.addedges(1, 2);
	g.addedges(2, 2);
	g.addedges(2, 3);
	g.display();
	g.dfs(0);
	return 0;
}
