#include <iostream>

using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node(int data):data(data),next(nullptr){}
};

class LinkedList {
    Node* head;
public:
    LinkedList() :head(nullptr) {}

    void insert(int data) {
        Node* newnode = new Node(data);
        newnode->next = head;
        head = newnode;
    }

    void display() {
        Node* current = head;
        while (current != nullptr) {
            cout << current->data << " << ";
            current = current->next;
        }
        cout << "Nullptr" << endl;
    }


    bool hasloop() {
       Node* slow = head; 
       Node* fast = head;

       while (fast != nullptr && fast->next != nullptr) {
           slow = slow->next;
           fast = fast->next->next;

           if (slow == fast) {
               return true;
           }
       }
       return false;
    }
};

int main() {
    LinkedList list1;
  
   
    list1.insert(11);
    list1.insert(9);
    list1.insert(7);
    list1.insert(5);
    list1.insert(3);
    list1.insert(1);
    list1.display();


    

    bool result = list1.hasloop();
    cout << result << endl;
}
